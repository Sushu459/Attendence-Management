import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { useToast } from '@/hooks/use-toast';
import { 
  Share2, 
  Download, 
  Copy, 
  MessageSquare, 
  BookOpen,
  CheckCircle,
  AlertTriangle,
  Calculator
} from 'lucide-react';

interface AttendanceData {
  totalClasses: number;
  attendedClasses: number;
  targetPercentage: number;
}

interface AttendanceResult {
  currentPercentage: number;
  status: 'safe' | 'warning' | 'danger';
  classesToAttend: number;
  classesToBunk: number;
  message: string;
}

interface ExportDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  data: AttendanceData;
  result: AttendanceResult | null;
}

const ExportDialog: React.FC<ExportDialogProps> = ({ 
  open, 
  onOpenChange, 
  data, 
  result 
}) => {
  const [exportFormat, setExportFormat] = useState<'text' | 'summary'>('summary');
  const { toast } = useToast();

  if (!result) return null;

  const generateTextReport = () => {
    const date = new Date().toLocaleDateString();
    const statusIcon = result.status === 'safe' ? '✅' : 
                      result.status === 'warning' ? '⚠️' : '❌';
    
    return `📚 Student Attendance Report - ${date}

${statusIcon} ATTENDANCE STATUS
Current Percentage: ${result.currentPercentage.toFixed(1)}%
Target Percentage: ${data.targetPercentage}%
Status: ${result.status.toUpperCase()}

📊 CLASS BREAKDOWN
Total Classes Held: ${data.totalClasses}
Classes Attended: ${data.attendedClasses}
Classes Missed: ${data.totalClasses - data.attendedClasses}

${result.status === 'safe' ? 
  `🎉 GOOD NEWS!\nYou're ${(result.currentPercentage - data.targetPercentage).toFixed(1)}% above target.\nSafe to miss: ${result.classesToBunk} classes` :
  `⚡ ACTION NEEDED!\nClasses to attend: ${result.classesToAttend}\nTo reach ${data.targetPercentage}% attendance`
}

💡 TIP: Keep tracking your attendance regularly to avoid last-minute stress!

Generated by Student Attendance Calculator`;
  };

  const generateSummaryReport = () => {
    const statusEmoji = result.status === 'safe' ? '🟢' : 
                       result.status === 'warning' ? '🟡' : '🔴';
    
    return `${statusEmoji} Attendance: ${result.currentPercentage.toFixed(1)}% | Target: ${data.targetPercentage}% | ${result.message}`;
  };

  const copyToClipboard = async () => {
    const text = exportFormat === 'text' ? generateTextReport() : generateSummaryReport();
    
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied to Clipboard",
        description: "Attendance report copied successfully!",
      });
    } catch (err) {
      // Fallback for browsers that don't support clipboard API
      const textArea = document.createElement('textarea');
      textArea.value = text;
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      
      toast({
        title: "Copied to Clipboard",
        description: "Attendance report copied successfully!",
      });
    }
  };

  const shareViaWhatsApp = () => {
    const text = generateSummaryReport();
    const encodedText = encodeURIComponent(text);
    const whatsappUrl = `https://wa.me/?text=${encodedText}`;
    window.open(whatsappUrl, '_blank');
  };

  const downloadAsText = () => {
    const text = generateTextReport();
    const blob = new Blob([text], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `attendance-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    
    toast({
      title: "Download Started",
      description: "Your attendance report is being downloaded!",
    });
  };

  const getStatusIcon = () => {
    switch (result.status) {
      case 'safe':
        return <CheckCircle className="h-5 w-5 text-success" />;
      case 'warning':
        return <AlertTriangle className="h-5 w-5 text-warning" />;
      case 'danger':
        return <AlertTriangle className="h-5 w-5 text-destructive" />;
      default:
        return <Calculator className="h-5 w-5" />;
    }
  };

  const getStatusBadgeVariant = () => {
    switch (result.status) {
      case 'safe':
        return 'default';
      case 'warning':
        return 'secondary';
      case 'danger':
        return 'destructive';
      default:
        return 'secondary';
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Share2 className="h-5 w-5" />
            Share Attendance Report
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-6">
          {/* Preview Card */}
          <Card className="bg-gradient-card border">
            <CardContent className="p-4 space-y-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <BookOpen className="h-4 w-4 text-primary" />
                  <span className="font-semibold text-sm">Attendance Report</span>
                </div>
                <Badge variant={getStatusBadgeVariant()}>
                  {result.currentPercentage.toFixed(1)}%
                </Badge>
              </div>
              
              <Separator />
              
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  {getStatusIcon()}
                  <span className="text-sm font-medium">Status: {result.status.toUpperCase()}</span>
                </div>
                
                <div className="text-sm text-muted-foreground">
                  {result.message}
                </div>
                
                <div className="grid grid-cols-3 gap-2 text-xs">
                  <div className="text-center">
                    <div className="font-semibold">{data.attendedClasses}</div>
                    <div className="text-muted-foreground">Attended</div>
                  </div>
                  <div className="text-center">
                    <div className="font-semibold">{data.totalClasses}</div>
                    <div className="text-muted-foreground">Total</div>
                  </div>
                  <div className="text-center">
                    <div className="font-semibold">{data.targetPercentage}%</div>
                    <div className="text-muted-foreground">Target</div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Format Selection */}
          <div className="space-y-3">
            <label className="text-sm font-medium">Export Format:</label>
            <div className="flex gap-2">
              <Button
                variant={exportFormat === 'summary' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setExportFormat('summary')}
                className="flex-1"
              >
                Summary
              </Button>
              <Button
                variant={exportFormat === 'text' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setExportFormat('text')}
                className="flex-1"
              >
                Detailed
              </Button>
            </div>
          </div>

          {/* Export Options */}
          <div className="space-y-3">
            <div className="grid grid-cols-2 gap-3">
              <Button 
                onClick={copyToClipboard}
                variant="outline"
                className="flex items-center gap-2"
              >
                <Copy className="h-4 w-4" />
                Copy Text
              </Button>
              
              <Button 
                onClick={downloadAsText}
                variant="outline"
                className="flex items-center gap-2"
              >
                <Download className="h-4 w-4" />
                Download
              </Button>
            </div>
            
            <Button 
              onClick={shareViaWhatsApp}
              variant="success"
              className="w-full flex items-center gap-2"
            >
              <MessageSquare className="h-4 w-4" />
              Share on WhatsApp
            </Button>
          </div>

          {/* Preview Text */}
          {exportFormat === 'text' && (
            <div className="space-y-2">
              <label className="text-sm font-medium">Preview:</label>
              <div className="p-3 bg-muted rounded-lg text-xs font-mono whitespace-pre-line max-h-32 overflow-y-auto">
                {generateTextReport()}
              </div>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default ExportDialog;